from dotenv import load_dotenv
import streamlit as st
import os
import time

# Langchain e integra√ß√£o
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain
from langchain_core.prompts import ChatPromptTemplate
from langchain_community.document_loaders import PyPDFLoader
from langchain_core.documents import Document
from langchain_groq import ChatGroq

# === Carregar chaves ===
load_dotenv(dotenv_path="Chatbot_Wiki/.env")

groq_api_key = os.getenv("groq_api_key") or st.secrets.get("groq_api_key")
google_api_key = os.getenv("google_api_key") or st.secrets.get("google_api_key")

if not groq_api_key:
    st.error("‚ö†Ô∏è Chave da Groq n√£o encontrada.")
    st.stop()

if not google_api_key:
    st.error("‚ö†Ô∏è Chave da Google API n√£o encontrada.")
    st.stop()

# === Interface ===
st.image("wiki.png", width=200)
st.title("Chat Documenta Wiki - D√∫vidas sobre a ferramenta")

# === LLM ===
llm = ChatGroq(groq_api_key=groq_api_key, model_name="Llama3-8b-8192")

# === Prompt ===
prompt = ChatPromptTemplate.from_template("""
Voc√™ √© um assistente especializado na Documenta Wiki, ferramenta oficial do Minist√©rio do Desenvolvimento e Assist√™ncia Social, Fam√≠lia e Combate √† Fome (MDS), utilizada para documentar programas, a√ß√µes, sistemas e indicadores.

Baseie sua resposta no contexto fornecido abaixo. D√™ respostas completas, expandindo a explica√ß√£o com base no conte√∫do conhecido sobre a plataforma. Responda sempre em linguagem acess√≠vel, por√©m formal.

‚ö†Ô∏è Diferencie claramente:
- Quando a pergunta for sobre **como solicitar acesso para editar** (perfil de edi√ß√£o), responda com o procedimento institucional (envio de e-mail ao DMA).
- Quando for sobre **como editar uma ficha**, apresente as instru√ß√µes da interface.
- Quando for sobre **quem pode publicar uma ficha de programa**, destaque que ap√≥s a cria√ß√£o da ficha de programa pelo DMA, e preenchimento da ficha pelo ponto focal, a publica√ß√£o depende da an√°lise e autoriza√ß√£o pr√©via do DMA.
- Quando for sobre **quem pode criar uma ficha de indicador**, informe que para criar uma nova ficha de programa, envie solicita√ß√£o ao DMA por e-mail. A ficha ser√° criada ap√≥s envio completo das informa√ß√µes. 
- Quando for sobre **quem pode publicar uma ficha de indicador**, destaque que ap√≥s a cria√ß√£o da ficha de indicador pelo DMA a pr√≥pria √°rea pode publicar, desde que a ficha esteja completamente preechida conforme orienta√ß√µes constantes na ficha original para cada campo.
Destaque que n√£o precisa da autozi√ß√£o pr√©via do DMA para a publica√ß√£o da ficha do indicador.
- Quando for sobre **quem pode criar uma ficha de indicador**, informe que para criar uma nova ficha de indicador, envie solicita√ß√£o ao DMA por e-mail. A ficha ser√° criada ap√≥s envio completo das informa√ß√µes em at√© 48 horas. 

Se a pergunta envolver **uma ficha de indicador preenchida**, use o documento "Ficha de Indicador.pdf" como base. Avalie a orienta√ß√£o para preenchimento de cada campo contido no material de refer√™ncia e **solicite que o usu√°rio forne√ßa as informa√ß√µes 
m√≠nimas necess√°rias para o preenchimento dos campos** sem, entretanto, pedir todos os campos. Tente, a partir do contexto dado, propor os campos de cada ficha. Para propor o nome do indicador, use o documento "Protocolo_nomeacao_indicadores" como base. Entretanto,
destaque que o nome do indicador deve ser definido em conjunto com o DMA.

Se a Se a pergunta envolver **como preencher um campo da ficha do indicador**, use o documento "Ficha de Indicador.pdf" como base. Descreva o que deve conter no campo questionado e sugira exemplos de resposta.

Se a pergunta envolver **propor uma ficha de programa preenchida**, destaque que √© necess√°rio o envio de **refer√™ncias legais e informa√ß√µes t√©cnicas** sobre o programa, use o documento "Ficha de Indicador.pdf" como base.  Avalie a orienta√ß√£o para preenchimento de cada campo contido 
nesse material de refer√™ncia

üîé Importante: Ao propor qualquer ficha preenchida, **informe que a proposta pode conter erros**, devendo ser revisada com aten√ß√£o pelo ponto focal antes de ser transportada para a Documenta Wiki.

Se a pergunta for sobre conte√∫dos que mudam frequentemente (como lista de programas), oriente o usu√°rio a acessar a Documenta Wiki pelo link oficial:
mds.gov.br/documenta-wiki. Entretanto, explique a organiza√ß√£o b√°sica da ferramenta, com a apresenta√ß√£o dos programas atualmente vigentes e os programas descontinuados. Que ao acessar a p√°gina de cada programa √© poss√≠vel acessar a lista de indicadores documentados e 
outros conte√∫dos relacionados ao programa.

N√£o cite o nome dos documentos como resposta aos usu√°rio, pois eles n√£o tem acesso aos documentos. 

Sempre no final de cada intera√ß√£o, use frases motivacionais, da import√¢ncia da documenta√ß√£o de indicadores, da completude do preenchimento das fichas, da publica√ß√£o das fichas, variando as frases a cada intera√ß√£o.

<contexto>
{context}
</contexto>

Pergunta:
{input}
""")

# === Fun√ß√£o de vetoriza√ß√£o ===
def vector_embedding():
    if "vectors" in st.session_state:
        return  # J√° carregado

    try:
        st.session_state.embeddings = GoogleGenerativeAIEmbeddings(
            model="models/embedding-001",
            google_api_key=google_api_key
        )
    except Exception as e:
        st.error(f"‚ùå Erro ao inicializar embeddings: {e}")
        st.stop()

    pdf_paths = [
        "Manual_de_Uso_Documenta_Wiki_MDS_SAGICAD.pdf",
        "Roteiro_video_divulgacao.pdf",
        "Roteiro_Tutorial_Documenta_Wiki.pdf",
        "Ficha de Indicador.pdf",
        "Ficha de Programa.pdf",
        "Ficha de Sintaxe.pdf"
    ]

    docs = []
    for path in pdf_paths:
        if os.path.exists(path):
            loader = PyPDFLoader(path)
            docs.extend(loader.load())
        else:
            st.warning(f"‚ö†Ô∏è Arquivo n√£o encontrado: {path}")

    if not docs:
        st.error("‚ùå Nenhum documento foi carregado.")
        st.stop()

    splitter = RecursiveCharacterTextSplitter(chunk_size=300, chunk_overlap=30)
    chunks = splitter.split_documents(docs)

    def limpar_texto(txt):
        return txt.encode("utf-8", "ignore").decode("utf-8").strip()

    chunks = [
        Document(page_content=limpar_texto(doc.page_content), metadata=doc.metadata)
        for doc in chunks
    ]

    st.write(f"üìÑ {len(docs)} documentos carregados | üî¢ {len(chunks)} chunks gerados")

    try:
        _ = st.session_state.embeddings.embed_documents(["teste simples"])
    except Exception as e:
        st.error(f"‚ùå Falha ao testar embedding: {e}")
        st.stop()

    try:
        st.session_state.vectors = FAISS.from_documents(chunks, st.session_state.embeddings)
        st.session_state.ready = True
        st.success("‚úÖ Vetoriza√ß√£o conclu√≠da com sucesso!")
    except Exception as e:
        st.error(f"‚ùå Falha ao criar √≠ndice FAISS: {e}")
        st.stop()

# === Entrada do usu√°rio ===
prompt1 = st.text_input("Digite sua pergunta sobre a Documenta Wiki")

# === Bot√£o de carregamento ===
if st.button("Carregar base do chat"):
    with st.spinner("Carregando base de conhecimento..."):
        vector_embedding()

# === Execu√ß√£o do chat ===
if prompt1:
    if "vectors" not in st.session_state:
        st.warning("‚ö†Ô∏è Clique em 'Carregar base do chat' antes de perguntar.")
    else:
        document_chain = create_stuff_documents_chain(llm, prompt)
        retriever = st.session_state.vectors.as_retriever()
        retrieval_chain = create_retrieval_chain(retriever, document_chain)

        with st.spinner("üß† Gerando resposta..."):
            start = time.process_time()
            response = retrieval_chain.invoke({"input": prompt1})
            elapsed = time.process_time() - start

        st.markdown("### ü§ñ Resposta")
        st.success(response['answer'])
        st.write(f"‚è±Ô∏è Tempo de resposta: {elapsed:.2f} segundos")

        with st.expander("üìÑ Trechos usados da base de conhecimento"):
            for i, doc in enumerate(response.get("context", [])):
                st.markdown(f"""
                    <div style="background-color:#f0f0f0; padding:10px; margin:5px; border-left: 4px solid #888;">
                        <p>{doc.page_content}</p>
                    </div>
                """, unsafe_allow_html=True)

        

